// MCP Server for Superglue - Generate Final Transformation
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";
import { createDataStore } from "../datastore/datastore.js";
import { logMessage } from "../utils/logs.js";
import { WorkflowExecutor } from "../workflow/workflow-executor.js";
import { getSchemaFromData, sample } from "../utils/tools.js";

// ÂàõÂª∫Êï∞ÊçÆÂ≠òÂÇ®ÂÆû‰æã
const datastore = createDataStore({ type: process.env.DATASTORE_TYPE as any });

// ÂàõÂª∫ MCP ÊúçÂä°Âô®ÂÆû‰æã
const server = new Server(
  {
    name: "superglue-mcp-server",
    version: "1.0.0",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// Ê≥®ÂÜåÂ∑•ÂÖ∑
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: "generate_final_transform",
        description:
          "Generate Final Transformation (JSONata) for a workflow. This tool executes the workflow and provides data structure information that you can use to create a JSONata expression.",
        inputSchema: {
          type: "object",
          properties: {
            workflowId: {
              type: "string",
              description:
                "The ID of the workflow to generate Final Transformation for",
            },
            payload: {
              type: "object",
              description:
                "Input data to execute the workflow and generate sample data",
              default: {},
            },
            credentials: {
              type: "object",
              description: "Authentication credentials for workflow execution",
              default: {},
            },
          },
          required: ["workflowId"],
        },
      },
    ],
  };
});

// Â§ÑÁêÜÂ∑•ÂÖ∑Ë∞ÉÁî®
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    switch (name) {
      case "generate_final_transform": {
        const {
          workflowId,
          payload = {},
          credentials = {},
        } = args as {
          workflowId: string;
          payload?: any;
          credentials?: any;
        };

        // 1. Ëé∑ÂèñÂ∑•‰ΩúÊµÅÈÖçÁΩÆ
        const workflow = await datastore.getWorkflow(workflowId, "default");
        if (!workflow) {
          throw new Error(`Workflow with ID '${workflowId}' not found`);
        }

        logMessage(
          "info",
          `Executing workflow for Final Transformation generation: ${workflowId}`,
          {
            runId: crypto.randomUUID(),
            orgId: "default",
          }
        );

        // 2. ÊâßË°åÂ∑•‰ΩúÊµÅ‰ª•Ëé∑ÂèñÁ§∫‰æãÊï∞ÊçÆ
        const metadata = { orgId: "default", runId: crypto.randomUUID() };
        const executor = new WorkflowExecutor(workflow, metadata);

        const executionResult = await executor.execute(
          payload,
          credentials as Record<string, string>,
          { cacheMode: "DISABLED" as any },
          datastore,
          "default"
        );

        if (!executionResult.success) {
          throw new Error(
            `Workflow execution failed: ${executionResult.error}`
          );
        }

        // 3. ÂáÜÂ§áÊ≠•È™§ÁªìÊûúÊï∞ÊçÆ
        const stepData = executionResult.stepResults.reduce(
          (acc, stepResult) => {
            if (stepResult.success && stepResult.transformedData) {
              acc[stepResult.stepId] = stepResult.transformedData;
            }
            return acc;
          },
          {} as Record<string, unknown>
        );

        // Ê∑ªÂä†ÂéüÂßã payload Êï∞ÊçÆ
        const combinedData = {
          ...payload,
          ...stepData,
        };

        // 4. ÁîüÊàêÊï∞ÊçÆÁªìÊûÑ‰ø°ÊÅØ‰æõ LLM ‰ΩøÁî®
        const dataStructure = getSchemaFromData(combinedData);
        const sampleData = sample(combinedData, 2);

        logMessage(
          "info",
          `Workflow executed successfully, providing data structure for JSONata generation`,
          {
            runId: metadata.runId,
            orgId: metadata.orgId,
          }
        );

        // 5. ËøîÂõûÁªìÊûúÔºåÂåÖÂê´ËØ¶ÁªÜÁöÑÊï∞ÊçÆÁªìÊûÑ‰ø°ÊÅØÂíåÊåáÂØº
        const result = {
          success: true,
          workflowId,
          executionSummary: {
            totalSteps: executionResult.stepResults.length,
            successfulSteps: executionResult.stepResults.filter(
              (s) => s.success
            ).length,
            stepResults: executionResult.stepResults.map((step) => ({
              stepId: step.stepId,
              success: step.success,
              hasData: !!step.transformedData,
              dataType: step.transformedData
                ? typeof step.transformedData
                : null,
            })),
          },
          dataStructure: {
            schema: dataStructure,
            sampleData: sampleData,
            availableFields: Object.keys(combinedData),
            stepDataFields: Object.keys(stepData),
          },
          jsonataGuide: {
            description:
              "Use the provided data structure to create a JSONata expression for Final Transformation",
            instructions: [
              "The available data includes original payload and all successful step results",
              "Step results are available by their stepId (e.g., stepId.fieldName)",
              "Original payload fields are available at root level",
              'Use JSONata syntax like: { "result": stepId.data, "summary": payload.info }',
              'For arrays, use expressions like: stepId.items[*].{ "name": name, "value": value }',
              'You can combine multiple step results: { "step1Data": step1.result, "step2Data": step2.result }',
            ],
            examples: [
              'Simple field mapping: { "name": step1.user.name, "email": step1.user.email }',
              'Array transformation: stepData.results[*].{ "id": id, "status": status }',
              'Conditional logic: status = "active" ? step1.data : step2.fallback',
              'Aggregation: { "total": $sum(stepData.items[*].amount) }',
            ],
          },
          generatedAt: new Date().toISOString(),
        };

        return {
          content: [
            {
              type: "text",
              text: JSON.stringify(result, null, 2),
            },
          ],
        };
      }

      default:
        throw new Error(`Unknown tool: ${name}`);
    }
  } catch (error: any) {
    logMessage("error", `MCP tool execution failed: ${error.message}`, {
      runId: crypto.randomUUID(),
      orgId: "default",
    });

    return {
      content: [
        {
          type: "text",
          text: JSON.stringify(
            {
              success: false,
              error: error.message,
              timestamp: new Date().toISOString(),
            },
            null,
            2
          ),
        },
      ],
      isError: true,
    };
  }
});

// ÂêØÂä® MCP ÊúçÂä°Âô®
export async function startMcpServer() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  logMessage(
    "info",
    "ü§ñ Superglue MCP Server started - Generate Final Transformation only"
  );
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§Êñá‰ª∂ÔºåÂêØÂä®ÊúçÂä°Âô®
// ÊîØÊåÅÂ§öÁßç Node.js ÂÖ•Âè£Ê£ÄÊµãÊñπÂºè
const isMainModule = 
  import.meta.url === `file://${process.argv[1]}` ||
  process.argv[1]?.endsWith('mcp/index.js') ||
  process.argv[1]?.includes('mcp\\index.js');

if (isMainModule) {
  console.log('üöÄ Starting MCP Server...');
  startMcpServer().catch((error) => {
    console.error(`‚ùå Failed to start MCP server: ${error.message}`);
    logMessage("error", `Failed to start MCP server: ${error.message}`);
    process.exit(1);
  });
}
